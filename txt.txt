

{
    ID: {
    id: 'ID'
    title: 'React',
    questions: [
      {
        question: 'What is React?',
        answer: 'A library for managing user interfaces'
      },
      {
        question: 'Where do you make Ajax requests in React?',
        answer: 'The componentDidMount lifecycle event'
      }
    ]
  },
  ID: {
    id: 'ID'
    title: 'JavaScript',
    questions: [
      {
        question: 'What is a closure?',
        answer: 'The combination of a function and the lexical environment within which that function was declared.'
      }
    ]
  }
}

Specific Requirements
*Allow users to create a deck which can hold an unlimited number of cards: A traves de
    CreateDeck se agrega el nuevo Deck al Storage y al Store.
*Allow users to add a card to a specific deck: Agregar un nuevo question al array questions
    del respectivo Deck.
*The front of the card should display the question: Renderiza la pregunta junto con un boton de Correct
    e Incorrect.
*The back of the card should display the answer: Renderiza true o false
*Users should be able to quiz themselves on a specific deck and receive a score once they're done: Se puede realizar
    utilizando el estado interno del component
*Users should receive a notification to remind themselves to study if they haven't already for that day.


Deck.js includes (at a minimum):
*The deck title: deck Id
*Number of cards in the deck: lenght of the questions array
*Option to start a quiz for that deck: route Stack a Quiz View
*Option to add a new question to the Deck: route Stack a New Question View

NewQuestion.js includes (child of Deck.js):
The New Question view includes a form with fields for a
question and answer, and a submit button. It has to dispatch an action to
save the question y questions array to the Store: La respuesta sera seleccionar
un boton de correcto o incorrecto en la vista

Quiz.js:
*The Quiz view starts with a question from the selected
deck.
*The question is displayed, along with a button to show
the answer.
*Pressing the 'Show Answer' button displays the
answer.
*Buttons are included to allow the student to mark their
guess as 'Correct' or 'Incorrect'
*The view displays the number of questions remaining.
*When the last question is answered, a score is
displayed. This can be displayed as a percentage of
correct answers or just the number of questions
answered correctly.
*When the score is displayed, buttons are displayed to
either start the quiz over or go back to the Individual
Deck view.
*Both the 'Restart Quiz' and 'Back to Deck' buttons
route correctly to their respective views.

CreateDeck.js:
*The view includes a form for creating a new deck - which
should just be an input for the title and a 'Create Deck'
button.
*Pressing the button correctly creates the deck and routes
the user to the Individual Deck view for the new deck.

